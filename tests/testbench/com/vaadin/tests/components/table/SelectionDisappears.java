package com.vaadin.tests.components.table;

import java.util.HashSet;
import java.util.Set;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.event.Action;
import com.vaadin.terminal.Resource;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.tests.components.TestBase;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.CellStyleGenerator;
import com.vaadin.ui.VerticalLayout;

public class SelectionDisappears extends TestBase {

    @AutoGenerated
    private Table table;

    private static final String ID = "id";
    private static final String NAME = "name";
    private static final String FLAG = "flag";

    static final Action ACTION_MARK = new Action("Mark");
    static final Action ACTION_UNMARK = new Action("Unmark");
    static final Action ACTION_LOG = new Action("Save");
    static final Action[] ACTIONS_UNMARKED = new Action[] { ACTION_MARK,
            ACTION_LOG };
    static final Action[] ACTIONS_MARKED = new Action[] { ACTION_UNMARK,
            ACTION_LOG };

    private String script = "var active = function() { return false; };"
            + " var clients = window.vaadin.clients;"
            + " if (clients) { for (var client in clients) {  clients[client].isActive = active; } }";

    @Override
    protected void setup() {
        getMainWindow().executeJavaScript(script);
        addComponent(new SelectionExample());
    }

    @Override
    protected String getDescription() {
        return "Server roundtrip occasionally loses the new selection"
                + " when server round trip overrides the new value with"
                + " the old one (data sent before server side updated)."
                + " When the selection changes on server side it doesn't"
                + " cause another repaint, although scrolling a bit (so"
                + " the row in question gets hidden and visible again)"
                + " will return the selection.";
    }

    @Override
    protected Integer getTicketNumber() {
        return 6684;
    }

    public class SelectionExample extends VerticalLayout {

        Table table = new Table("Dummy names & ids with failing icons");

        HashSet<Object> markedRows = new HashSet<Object>();
        Label selected = new Label();

        public SelectionExample() {
            addComponent(table);
            setMargin(true, false, false, false);

            // Label to indicate current selection
            selected.setValue("No selection");
            addComponent(selected);

            // set a style name, so we can style rows and cells
            table.setStyleName("iso3166");

            // size
            table.setWidth("100%");
            table.setPageLength(15);

            // selectable
            table.setSelectable(true);
            table.setMultiSelect(true);
            table.setImmediate(true); // react at once when something is
                                      // selected

            // connect data source
            table.setContainerDataSource(getContainer());

            // turn on column reordering and collapsing
            table.setColumnReorderingAllowed(true);
            table.setColumnCollapsingAllowed(true);

            // set column headers
            table.setColumnHeaders(new String[] { "DummyCountry", "DummyCode",
                    "Icon file" });

            // Icons for column headers
            table.setColumnIcon(FLAG, new ThemeResource(
                    "../sampler/icons/action_save.gif"));
            table.setColumnIcon(NAME, new ThemeResource(
                    "../sampler/icons/icon_get_world.gif"));
            table.setColumnIcon(ID, new ThemeResource(
                    "../sampler/icons/page_code.gif"));

            // Column alignment
            table.setColumnAlignment(ID, Table.ALIGN_CENTER);

            // Column width
            table.setColumnExpandRatio(NAME, 1);
            table.setColumnWidth(ID, 70);

            // Collapse one column - the user can make it visible again
            table.setColumnCollapsed(FLAG, true);

            // show row header w/ icon
            table.setRowHeaderMode(Table.ROW_HEADER_MODE_ICON_ONLY);
            table.setItemIconPropertyId(FLAG);

            // Actions (a.k.a context menu)
            table.addActionHandler(actionHandler);

            // style generator
            table.setCellStyleGenerator(cellStyleGenerator);

            // listen for valueChange, a.k.a 'select' and update the label
            table.addListener(valueChangeListener);

        }

        Action.Handler actionHandler = new Action.Handler() {
            public Action[] getActions(Object target, Object sender) {
                if (markedRows.contains(target)) {
                    return ACTIONS_MARKED;
                } else {
                    return ACTIONS_UNMARKED;
                }
            }

            public void handleAction(Action action, Object sender, Object target) {
                if (ACTION_MARK == action) {
                    markedRows.add(target);
                    table.refreshRowCache();
                } else if (ACTION_UNMARK == action) {
                    markedRows.remove(target);
                    table.refreshRowCache();
                } else if (ACTION_LOG == action) {
                    Item item = table.getItem(target);
                    addComponent(new Label("Saved: " + target + ", "
                            + item.getItemProperty(NAME).getValue()));
                }

            }

        };

        CellStyleGenerator cellStyleGenerator = new CellStyleGenerator() {
            public String getStyle(Object itemId, Object propertyId) {
                try {
                    // Simulate background work
                    Thread.sleep(50);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                if (propertyId == null) {
                    // no propertyId, styling row
                    return (markedRows.contains(itemId) ? "marked" : null);
                } else if (NAME.equals(propertyId)) {
                    return "bold";
                } else {
                    // no style
                    return null;
                }

            }

        };

        Table.ValueChangeListener valueChangeListener = new Table.ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                // in multiselect mode, a Set of itemIds is returned,
                // in singleselect mode the itemId is returned directly
                Set<?> value = (Set<?>) event.getProperty().getValue();
                if (null == value || value.size() == 0) {
                    selected.setValue("No selection");
                } else {
                    selected.setValue("Selected: " + table.getValue());
                }
            }
        };

        public IndexedContainer getContainer() {
            IndexedContainer container = new IndexedContainer();
            container.addContainerProperty(NAME, String.class, null);
            container.addContainerProperty(ID, Integer.class, null);
            container.addContainerProperty(FLAG, Resource.class, null);
            for (int i = 0; i < 264; i++) {
                String name = NAME + i;
                int id = i;
                Item item = container.addItem(id);
                item.getItemProperty(NAME).setValue(name);
                item.getItemProperty(ID).setValue(id);
                item.getItemProperty(FLAG).setValue(
                        new ThemeResource("../sampler/flags/" + id + ".gif"));
            }
            container.sort(new Object[] { ID }, new boolean[] { true });
            return container;
        }
    }

}
